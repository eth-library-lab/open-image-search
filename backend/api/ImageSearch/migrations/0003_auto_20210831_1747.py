# Generated by Django 3.1.2 on 2021-08-31 17:47

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('ImageSearch', '0002_auto_20210426_1643'),
    ]

    operations = [
        migrations.CreateModel(
            name='Classification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('created_date', models.DateTimeField(auto_now=True, verbose_name='db_created_date')),
            ],
        ),
        migrations.CreateModel(
            name='Institution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='credit line')),
                ('created', models.DateTimeField(auto_now=True, verbose_name='db_created_date')),
            ],
        ),
        migrations.CreateModel(
            name='MaterialTechnique',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('created_date', models.DateTimeField(auto_now=True, verbose_name='db_created_date')),
            ],
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('created_date', models.DateTimeField(auto_now=True, verbose_name='db_created_date')),
            ],
        ),
        migrations.CreateModel(
            name='Relationship',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='name relationship type')),
                ('created_date', models.DateTimeField(auto_now=True, verbose_name='db_created_date')),
            ],
        ),
        migrations.AddField(
            model_name='imagemetadata',
            name='year_max',
            field=models.IntegerField(blank=True, default=-1, null=True, validators=[django.core.validators.MinValueValidator(-1), django.core.validators.MaxValueValidator(9999)]),
        ),
        migrations.AddField(
            model_name='imagemetadata',
            name='year_min',
            field=models.IntegerField(blank=True, default=-1, null=True, validators=[django.core.validators.MinValueValidator(-1), django.core.validators.MaxValueValidator(9999)]),
        ),
        migrations.AddField(
            model_name='searchresult',
            name='query_parameters',
            field=models.JSONField(default=None, verbose_name='a json representation of the query filter parameters'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='imagemetadata',
            name='classification_id',
            field=models.ManyToManyField(blank=True, null=True, to='ImageSearch.Classification'),
        ),
        migrations.AddField(
            model_name='imagemetadata',
            name='institution_isil_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='ImageSearch.institution'),
        ),
        migrations.AddField(
            model_name='imagemetadata',
            name='material_technique_id',
            field=models.ManyToManyField(to='ImageSearch.MaterialTechnique'),
        ),
        migrations.AddField(
            model_name='imagemetadata',
            name='person_id',
            field=models.ManyToManyField(to='ImageSearch.Person'),
        ),
        migrations.AddField(
            model_name='imagemetadata',
            name='relationship_type_id',
            field=models.ManyToManyField(to='ImageSearch.Relationship'),
        ),
    ]
